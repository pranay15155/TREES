/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void f(TreeNode* root,vector<int>adj[]){
         if(!root)return;
         if(root->left){
            adj[root->val].push_back(root->left->val);
            adj[root->left->val].push_back(root->val);
         }
         if(root->right){
            adj[root->val].push_back(root->right->val);
            adj[root->right->val].push_back(root->val);
         }
         f(root->left,adj);
         f(root->right,adj);
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        vector<int>adj[505];
        vector<int>vis(505,0);
        f(root,adj);
        int level=0;
        queue<int>q;
        q.push(target->val);
        vis[target->val]=1;
        vector<int>ans;
        while(q.size()){
          int size=q.size();
          for(int i=0;i<size;i++){
            int a=q.front();
            q.pop();
            for(auto &x:adj[a]){
              if(vis[x]==0){
                vis[x]=1;
                q.push(x);
              }
            }
            if(level==k)ans.push_back(a);
          }
          level++;
        }
        return ans;
    }
};
