/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
TreeNode* f(vector<int>& postorder, vector<int>& inorder,int in_start,int in_end,int post_start,int post_end,map<int,int>&mp){
        if(in_start>in_end || post_start>post_end)return NULL;
        int root_number=postorder[post_end];
        int root_index=mp[root_number];
        TreeNode*root=new TreeNode(root_number);
        int length=root_index-in_start;

        TreeNode*left_node=f(postorder,inorder,in_start,root_index-1,post_start,post_start+length-1,mp);
        TreeNode*right_node=f(postorder,inorder,root_index+1,in_end,post_start+length,post_end-1,mp);
        root->left=left_node;
        root->right=right_node;
        return root;
    }
   
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map<int,int>mp;
        for(int i=0;i<inorder.size();i++){
            mp[inorder[i]]=i;
        }
        int n=inorder.size();
        return f(postorder,inorder,0,n-1,0,n-1,mp);
    }
};
